{"name":"Fertilizer","tagline":"","body":"Fertilizer\r\n==\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/7b4b3585-f33b-4ae6-bab7-30cef98e2e70/big.png)](https://insight.sensiolabs.com/projects/7b4b3585-f33b-4ae6-bab7-30cef98e2e70)\r\n\r\n[![Build Status](https://travis-ci.org/JahHub/fertilizer.svg?branch=master)](https://travis-ci.org/JahHub/fertilizer)\r\n\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/JahHub/fertilizer/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/JahHub/fertilizer/?branch=master)[![Code Coverage](https://scrutinizer-ci.com/g/JahHub/fertilizer/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/JahHub/fertilizer/?branch=master)[![Build Status](https://scrutinizer-ci.com/g/JahHub/fertilizer/badges/build.png?b=master)](https://scrutinizer-ci.com/g/JahHub/fertilizer/build-status/master)\r\n\r\n***\r\n\r\n#How to use \r\n## Available make tasks\r\n```bash\r\n# project\r\nmake build [env=myEnv] # Will do a \"make configure\", a \"make install-dep\" and a \"make db-create [env=myEnv]\"\r\nmake configure # Will create the parameters.yml file from parameters.yml.dist file\r\nmake install-dep # Will download composer or update it to last version and do a \"composer install\"\r\n# database\r\nmake db-reset [env=myEnv] # Will do a \"make db-drop [env=myEnv]\" following by a \"make db-create [env=myEnv]\"\r\nmake db-drop [env=myEnv] # Will remove the database if exist for 'myEnv' environment\r\nmake db-create [env=myEnv] # Will create the database. Database must not exist else task will be on error for 'myEnv' environment\r\n\r\n#Dev/test env\r\n# Tests\r\nmake test # Will launch a \"make phpcs\" and a \"make phpunit\"\r\nmake phpcs # Will launch phpcs tests\r\nmake phpunit # Will launch phpunit tests\r\nmake paratest [paratest_process_count=N] # Will launch phpunit tests in N thread\r\n\r\n# Coverage\r\nmake coverage  [paratest_process_count=N] # Will do a \"make reset-coverage\" and a \"make paratest-coverage  [paratest_process_count=N]\"\r\nmake phpunit-coverage # Will launch phpunit tests with html coverage created on 'coverage' directory\r\nmake paratest-coverage [paratest_process_count=N] # Will launch phpunit tests in N thread with html coverage created on 'coverage' directory\r\nmake scrutinizer-coverage [paratest_process_count=N] # Will create coverage for scrutinizer in N threads\r\nmake reset-coverage # Will remove 'coverage' directory\r\n```\r\n## Create environment\r\n```bash\r\nmake build [env=dev]\r\n```\r\n## Test environment\r\n```bash\r\nmake build env=test\r\nmake test\r\n```\r\n## Test environment with paratest (4 threads)\r\n```bash\r\nmake build env=test # Will create the 'test' database for first thread\r\nmake db-create env=test_1 # Will create the 'test_1' database for second thread\r\nmake db-create env=test_2 # Will create the 'test_2' database for third thread\r\nmake db-create env=test_3 # Will create the 'test_3' database for last thread\r\nmake phpcs\r\nmake paratest paratest_process_count=4\r\n```\r\n## Create coverage with phpunit\r\n```bash\r\nmake build env=test\r\nmake coverage-reset\r\nmake phpunit-coverage\r\n```\r\n## Create coverage with paratest (faster)\r\n```bash\r\nmake build env=test # Will create the 'test' database for first thread\r\nmake db-create env=test_1 # Will create the 'test_1' database for second thread\r\nmake db-create env=test_2 # Will create the 'test_2' database for third thread\r\nmake db-create env=test_3 # Will create the 'test_3' database for last thread\r\nmake coverage paratest_process_count=4\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}